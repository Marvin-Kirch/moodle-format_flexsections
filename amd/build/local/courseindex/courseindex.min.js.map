{"version":3,"file":"courseindex.min.js","sources":["../../../src/local/courseindex/courseindex.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport BaseCourseindex from 'core_courseformat/local/courseindex/courseindex';\nimport Exporter from \"format_flexsections/local/courseeditor/exporter\";\n\n/**\n * Course index main component.\n *\n * @module     format_flexsections/local/courseindex/courseindex\n * @copyright  2022 Marina Glancu\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class Component extends BaseCourseindex {\n    // Extends course/format/amd/src/local/courseindex/courseindex.js\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        const courseEditor = getCurrentCourseEditor();\n        courseEditor.getExporter = () => new Exporter(courseEditor);\n        return new Component({\n            element: document.getElementById(target),\n            reactive: courseEditor,\n            selectors,\n        });\n    }\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n        // Optional component name for debugging.\n        this.name = 'course_format_flexsections_courseindex';\n        this.selectors.COURSE_SUBSECTIONLIST = `[data-for='subsectionlist']`;\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        let res = super.getWatchers();\n        res.push({watch: `course.hierarchy:updated`, handler: this._refreshCourseSectionlist});\n        return res;\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {object} param\n     * @param {Object} param.element\n     */\n    _refreshCourseSectionlist({element}) {\n        const hierarchy = element.hierarchy ?? [];\n        let dettachedSections = [];\n        for (let i = 0; i < hierarchy.length; i++) {\n            const sectionlist = hierarchy[i].children;\n            const listparent = this.getElement(this.selectors.COURSE_SUBSECTIONLIST + `[data-parent='${hierarchy[i].id}']`);\n            if (listparent) {\n                this._fixOrderFlexsections(listparent, sectionlist, this.selectors.SECTION, dettachedSections);\n            }\n        }\n\n        const sectionlist = element.sectionlist ?? [];\n        this._fixOrderFlexsections(this.element, sectionlist, this.selectors.SECTION, dettachedSections);\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     */\n    async _fixOrderFlexsections(container, neworder, selector, dettachedelements) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid];\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n        }\n    }\n\n    /**\n     * Create a new section instance.\n     *\n     * @param {Object} details the update details.\n     * @param {Object} details.state the state data.\n     * @param {Object} details.element the element data.\n     */\n    async _createSection({state, element}) {\n        const sectionItem = this.getElement('section', element.id) ?? this._createFakeSection(this.element, element.id);\n        if (0) { // eslint-disable-line no-constant-condition\n            // TODO. Commented out part of parent function code. Is it needed for something?\n            this.sections[element.id] = sectionItem;\n            // Place the fake node on the correct position.\n            this._refreshCourseSectionlist({\n                state,\n                element: state.course,\n            });\n        }\n        // Collect render data.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.section(state, element);\n        // Create the new content.\n        const newcomponent = await this.renderComponent(sectionItem, 'format_flexsections/local/courseindex/section', data);\n        // Replace the fake node with the real content.\n        const newelement = newcomponent.getElement();\n        this.sections[element.id] = newelement;\n        sectionItem.parentNode.replaceChild(newelement, sectionItem);\n    }\n\n    /**\n     * Create a placeholder for a section\n     *\n     * @param {Element} container\n     * @param {Number} sectionid\n     * @returns {Element}\n     */\n    _createFakeSection(container, sectionid) {\n        const fakeelement = document.createElement('div');\n        container.appendChild(fakeelement);\n        fakeelement.classList.add('bg-pulse-grey', 'w-100');\n        fakeelement.dataset.for = 'section';\n        fakeelement.dataset.id = sectionid;\n        fakeelement.innerHTML = '&nbsp;';\n        return fakeelement;\n    }\n}\n"],"names":["Component","BaseCourseindex","target","selectors","courseEditor","getExporter","Exporter","element","document","getElementById","reactive","create","descriptor","name","COURSE_SUBSECTIONLIST","getWatchers","res","super","push","watch","handler","this","_refreshCourseSectionlist","hierarchy","dettachedSections","i","length","sectionlist","children","listparent","getElement","id","_fixOrderFlexsections","SECTION","container","neworder","selector","dettachedelements","undefined","dndFakeActivity","classList","remove","forEach","itemid","index","item","currentitem","insertBefore","append","lastchild","lastChild","_lastchild$classList","contains","dataset","_lastchild$dataset","removeChild","add","innerHTML","state","sectionItem","_createFakeSection","data","section","newelement","renderComponent","sections","parentNode","replaceChild","sectionid","fakeelement","createElement","appendChild","for"],"mappings":";;;;;;;yLA0BqBA,kBAAkBC,iCAUvBC,OAAQC,iBACVC,cAAe,iDACrBA,aAAaC,YAAc,IAAM,IAAIC,kBAASF,cACvC,IAAIJ,UAAU,CACjBO,QAASC,SAASC,eAAeP,QACjCQ,SAAUN,aACVD,UAAAA,YASRQ,OAAOC,kBACGD,OAAOC,iBAERC,KAAO,8CACPV,UAAUW,oDAQnBC,kBACQC,IAAMC,MAAMF,qBAChBC,IAAIE,KAAK,CAACC,iCAAmCC,QAASC,KAAKC,4BACpDN,IASXM,gFAA0Bf,QAACA,oBACjBgB,qCAAYhB,QAAQgB,2DAAa,OACnCC,kBAAoB,OACnB,IAAIC,EAAI,EAAGA,EAAIF,UAAUG,OAAQD,IAAK,OACjCE,YAAcJ,UAAUE,GAAGG,SAC3BC,WAAaR,KAAKS,WAAWT,KAAKlB,UAAUW,8CAAyCS,UAAUE,GAAGM,UACpGF,iBACKG,sBAAsBH,WAAYF,YAAaN,KAAKlB,UAAU8B,QAAST,yBAI9EG,yCAAcpB,QAAQoB,iEAAe,QACtCK,sBAAsBX,KAAKd,QAASoB,YAAaN,KAAKlB,UAAU8B,QAAST,+CAWtDU,UAAWC,SAAUC,SAAUC,2BACrCC,IAAdJ,qBA0BAK,oBArBJL,UAAUM,UAAUC,OAAO,UAG3BN,SAASO,SAAQ,CAACC,OAAQC,kCAClBC,8BAAOxB,KAAKS,WAAWM,SAAUO,qDAAWN,kBAAkBM,gBACrDL,IAATO,kBAKEC,YAAcZ,UAAUN,SAASgB,YACnBN,IAAhBQ,YAIAA,cAAgBD,MAChBX,UAAUa,aAAaF,KAAMC,aAJ7BZ,UAAUc,OAAOH,SAYlBX,UAAUN,SAASF,OAASS,SAAST,QAAQ,gCAC1CuB,UAAYf,UAAUgB,0DACxBD,MAAAA,wCAAAA,UAAWT,2CAAXW,qBAAsBC,SAAS,qBAC/Bb,gBAAkBU,eAElBZ,gDAAkBY,MAAAA,sCAAAA,UAAWI,6CAAXC,mBAAoBvB,0DAAM,GAAKkB,UAErDf,UAAUqB,YAAYN,WAGtBV,iBACAL,UAAUc,OAAOT,iBAIhBJ,SAAST,SACVQ,UAAUM,UAAUgB,IAAI,UACxBtB,UAAUuB,UAAY,0DAWTC,MAACA,MAADnD,QAAQA,qBACnBoD,sCAActC,KAAKS,WAAW,UAAWvB,QAAQwB,mDAAOV,KAAKuC,mBAAmBvC,KAAKd,QAASA,QAAQwB,UAYtG8B,KADWxC,KAAKX,SAASL,cACTyD,QAAQJ,MAAOnD,SAI/BwD,kBAFqB1C,KAAK2C,gBAAgBL,YAAa,gDAAiDE,OAE9E/B,kBAC3BmC,SAAS1D,QAAQwB,IAAMgC,WAC5BJ,YAAYO,WAAWC,aAAaJ,WAAYJ,aAUpDC,mBAAmB1B,UAAWkC,iBACpBC,YAAc7D,SAAS8D,cAAc,cAC3CpC,UAAUqC,YAAYF,aACtBA,YAAY7B,UAAUgB,IAAI,gBAAiB,SAC3Ca,YAAYhB,QAAQmB,IAAM,UAC1BH,YAAYhB,QAAQtB,GAAKqC,UACzBC,YAAYZ,UAAY,SACjBY"}